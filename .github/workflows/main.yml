name: CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:

  check-package:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        image:
        # - docker.io/gnuoctave/octave
        - ghcr.io/gnu-octave/octave
        version:
        - latest

    steps:
      -
        name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      -
        name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3'
          bundler-cache: true  # runs 'bundle install' and caches installed gems automatically
      -
        name: Create local package repository
        run: |
          bundle exec jekyll build -d test
      -
        name: Check for changed packages
        run: |
          IFS=$'\n'
          for s in $(git --no-pager diff --name-status HEAD~1 HEAD)
          do
            if [[ ${s:0:1} != "D" ]]
            then
              f="$(echo "$s" | sed -r -e "s|.\s*(.*)|\1|")"
              if [ "$(dirname $f)" == "packages" ] && [ "${f##*.}" == "yaml" ]
              then
                name="$(basename $f)"
                CHANGED_PACKAGES+=" ${name%.*} "
              fi
            fi
          done
          if [ -n "$CHANGED_PACKAGES" ]
          then
            echo "Changed packages:  $CHANGED_PACKAGES"
            echo "CHANGED_PACKAGES=\"$CHANGED_PACKAGES\"" >> $GITHUB_ENV
          else
            echo "No packages changed."
          fi
        env:
          CHANGED_PACKAGES:
      -
        name: Pull Octave image
        if: ${{ env.CHANGED_PACKAGES != '' }}
        run: docker pull ${{ matrix.image }}:${{ matrix.version }}
      -
        name: Octave package test
        if: ${{ env.CHANGED_PACKAGES != '' }}
        run: |
          pkgs=${{ env.CHANGED_PACKAGES }}
          for p in $pkgs
          do
            echo -e "\n\n## Test package '$p'\n\n"
            docker run \
              --volume="$(pwd):/workdir:rw" \
              ${{ matrix.image }}:${{ matrix.version }} \
              octave-cli --eval "cd /workdir/assets/ci; \
                octave_ci('$p', '/workdir/test/packages.json')"
          done


  check-yaml:

    runs-on: ubuntu-latest

    steps:
      -
        name: Checkout repository
        uses: actions/checkout@v4
      -
        name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      -
        name: Install dependencies
        run: |
          python -m pip install --upgrade \
            pip setuptools wheel yamllint
      -
        name: Run yamllint
        run: yamllint -c ./assets/ci/yamllint.yaml packages
      -
        name: Validate schemas
        run: python ./assets/ci/validate_yaml.py
